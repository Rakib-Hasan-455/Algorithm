Step-1: Start
Step-2: Convert every connected node to its graph equivalent representation.
Step-3: Maintain a list of unvisited vertices. Assign a vertex as “source” and 
	also allocate a maximum possible cost (infinity) to every other vertex.
	The cost of the source to itself will be zero as it actually takes nothing
	to go to itself.
Step-4: In every step of the algorithm, it tries to minimize the cost for each vertex.
Step-5: For every unvisited neighbor (V2, V3) of the current vertex (V1) calculate the new cost from V1.
Step-6: The new cost of V2 is calculated as, minimum value of -> old existing cost of v2 and  
	sum of cost of V1 + the cost of edge from V1 to V2.  
Step-7: When all the neighbors of the current node are visited and cost has been calculated,
	 mark the current node V1 as visited and remove it from the unvisited list.
Step-8: Select next vertex with smallest cost from the unvisited list and repeat from
	 step 4 untill there is no. unvisited node.
Step-9: Print the shortest path cost of every node.
Step-10: End.